<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven />

	<!-- Top level view resolver for different types of content. It uses headers
		and extensions on the URL. For example, if the URL has no special ending,
		then JSP is assumed. If there is a .json on the end of the URL, then JSON
		messages are returned. -->
	<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager" />
	<context:component-scan base-package="org.raescott" >
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<!-- Turn off working out content type based on URL file extension, should
			fall back to looking at the Accept headers -->
		<property name="favorPathExtension" value="false" />
		<property name="favorParameter" value="false" />
		<property name="mediaTypes">
			<value>
				html=text/html
				json=application/json
			</value>
		</property>
	</bean>
	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="order" value="1" />
		<property name="contentNegotiationManager" ref="contentNegotiationManager" />
		<property name="viewResolvers">
			<list>
				<ref bean="jspViewResolver" />
			</list>
		</property>
		<property name="defaultViews">
			<list>
				<bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
					<property name="prefixJson" value="true" />
				</bean>
			</list>
		</property>
	</bean>

	<!-- Resolved views selected for rendering by @Controllers to .jsp resources
		in the WEB-INF/views directory -->
	<bean id="jspViewResolver"
		  class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="order" value="99" />
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>
</beans>